/* LAB06 - VETORES UNI E MULTIDIMENSIONAIS */

VETORES:

1. Faça um programa que possua um vetor denominado A que armazene 6 números inteiros.
O programa deve executar os seguintes passos:
a) Atribua os seguintes valores a esse vetor: 1, 0, 5, -2, -5, 7.
b) Armazene em uma variável inteira (simples) a soma entre os valores das posições
A[0], A[1] e A[5] do vetor e mostre na tela esta soma.
c) Modifique o vetor na posição 4, atribuindo a esta posição o valor 100.
d) Mostre na tela cada valor do vetor A, um em cada linha.

#include <stdio.h>

int main()
{

    int a[6] = {1, 0, 5, -2, -5, 7};

    int soma = a[0] + a[1] + a[5];

    a[4] = 100;

    printf("A soma eh %d\n", soma);

    printf("Os valores do vetor A:\n");
    for(int i=0; i<6; i++) {
        printf("%d\n", a[i]);
    }

    return 0;
}

2. Faça um programa que leia um vetor de 8 posições e, em seguida, leia também dois valores
X e Y quaisquer correspondentes a duas posições no vetor. Ao final seu programa deverá
escrever a soma dos valores encontrados nas respectivas posições X e Y.

#include <stdio.h>

int main()
{

    int x, y;
    int vetor[8];

    printf("Digite valores para o vetor: \n");

    for(int i=0; i<8; i++) {
        scanf("%d", &vetor[i]);
    }

    printf("Digite X: ");
    scanf("%d", &x);
    printf("Digite Y: ");
    scanf("%d", &y);

    if(x > 8 || y > 8) {
        printf("Digite valores para X e Y menores que 8!\n");
    } else {
        printf("A soma dos valores encontrados na posicao X e Y eh %d", vetor[x] + vetor[y]);
    }

    return 0;
}

3. Crie um programa que lê 6 valores inteiros e, em seguida, mostre na tela os valores lidos na
ordem inversa.

#include <stdio.h>

int main()
{

    int vetor[6];

    printf("Digite 6 valores inteiros:\n");

    for(int i=0; i<6; i++) {
        printf("Digite um valor para a posicao %d\n", i);
        scanf("%d", &vetor[i]);
    }

    printf("Os valores em ordem inversa sao:\n");

    for(int j=5; j>=0; j--) {
        printf("%d", vetor[j]);
    }

    return 0;
}


4. Fazer um programa para ler 5 valores e, em seguida, mostrar a posição onde se encontram
o maior e o menor valor.

#include <stdio.h>

int main()
{

    int vetor[5];
    int maior=0, menor=0;

    printf("Digite 5 valores inteiros:\n");

    for(int i=0; i<5; i++) {
        printf("Digite um valor para a posicao %d\n", i);
        scanf("%d", &vetor[i]);
    }

    for(int i=0; i<5; i++) {
        maior = vetor[i];

        for(int j=0; j<5; j++) {
            menor = vetor[j];
            if(menor > maior) {
                maior = menor;
            }
        }
    }

    printf("Maior eh %d e esta na posicao %d\n", maior, vetor[maior-1]);
    printf("Menor eh %d e esta na posicao %d\n", menor, vetor[menor-1]);

    return 0;
}


5. Faça um vetor de tamanho 50 preenchido com o seguinte valor: (i+5*i)%(i+1), sendo i
a posição do elemento no vetor. Em seguida imprima o vetor na tela.

#include <stdio.h>

int main()
{

    int vetor[50];

    for(int i=0; i<50; i++) {
        vetor[i] = ((i+5)*i)%(i+1);
    }

    for(int j=0; j<50; j++) {
        printf("%d, ", vetor[j]);
    }

    return 0;
}


6. Leia 10 números inteiros e armazene em um vetor. Em seguida escreva os elementos que
são primos e suas respectivas posições no vetor.

#include <stdio.h>

int ehPrimo(int num) {
    int divisores = 0;

    for(int i=1; i<=num; i++) {
        if(num % i == 0) {
            divisores += 1;
        }
    }

    if(divisores == 2) {
        return 1;
    } else {
        return 0;
    }
}

int main()
{

    int vetor[10];

    for(int i=0; i<10; i++) {
        printf("Digite um valor para a posicao %d: ", i);
        scanf("%d", &vetor[i]);
    }

    for(int j=0; j<=10; j++) {
        if(ehPrimo(vetor[j]) == 1) {
            printf("%d", vetor[j]);
        }
    }

    return 0;
}

7. Faça um programa que receba 6 números inteiros e mostre:
* Os números pares digitados;
* A soma dos números pares digitados;
* Os números ímpares digitados;
* A quantidade de números ímpares digitados;

#include <stdio.h>

int main()
{

    int vetor[6];
    int somaPar=0, somaImpar=0, quantImpar=0;

    for(int i=0; i<6; i++) {
        printf("Digite um valor para a posicao %d: ", i);
        scanf("%d", &vetor[i]);
    }

    for(int i=0; i<6; i++) {
        if(vetor[i] % 2 == 0) {
            printf("%d eh par!\n", vetor[i]);
            somaPar += i;
        } else if(vetor[i] % 2 != 0) {
            printf("%d eh impar!\n", vetor[i]);
            somaImpar += i;
            quantImpar += 1;
        }
    }

    printf("A soma dos pares eh %d.\n", somaPar);
    printf("O vetor tem %d numeros impares e a soma deles eh %d.\n", quantImpar, somaImpar);

    return 0;
}

8. Faça um programa para ler 10 números DIFERENTES a serem armazenados em um vetor. Os
dados deverão ser armazenados no vetor na ordem que forem sendo lidos, sendo que caso
o usuário digite um número que já foi digitado anteriormente, o programa deverá pedir para
ele digitar outro número. Note que cada valor digitado pelo usuário deve ser pesquisado no
vetor, verificando se ele existe entre os números que já foram fornecidos. Exibir na tela o
vetor final que foi digitado.

#include <stdio.h>

int main()
{

    int vetor[10];
    int digitado;

    for(int i=0; i<10; i++) {
        printf("Digite um valor para a posicao %d: ", i);
        scanf("%d", &vetor[i]);
        digitado = vetor[i];

        for(int j=0; j<i; j++) {
            if(digitado == vetor[j]) {
                printf("Esse valor ja foi digitado.\nDigite outro valor: ");
                scanf("%d", &vetor[j]);
            }
        }
    }

    for(int i=0; i<10; i++) {
        printf("%d\n", vetor[i]);
    }

    return 0;
}

MATRIZES	

1. Leia uma matriz 4 × 4, conte e escreva quantos valores maiores que 10 ela possui.

#include <stdio.h>

int main()
{
    int matriz[4][4];
    int quant = 0;

    for(int i=0; i<4; i++) {
        for(int j=0; j<4; j++) {
                printf("Digite os valores para a matriz[%d][%d]: ", i+1, j+1);
                scanf("%d", &matriz[i][j]);

                if(matriz[i][j] > 10) {
                    quant+=1;
                    printf("O valor %d na posicao [%d][%d] eh maior que 10!\n", i, j, matriz[i][j]);
                }
        }
    }

    printf("A matriz possui %d numeros maiores que 10!\n", quant);

    return 0;
}

2. Declare uma matriz 5 × 5. Preencha com 1 a diagonal principal e com 0 os demais elementos.
Escreva ao final a matriz obtida.

#include <stdio.h>

int main()
{

    int matriz[5][5];

    for(int i=0; i<5; i++) {
        for(int j=0; j<5; j++) {
            (i == j) ? (matriz[i][j] = 1) : (matriz[i][j] = 0);
        }
    }

    for(int i=0; i<5; i++) {
        for(int j=0; j<5; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}

3. Leia uma matriz 4 × 4, imprima a matriz e retorne a localização (linha e a coluna) do maior
valor.

#include <stdio.h>

int main() {

    int matriz[4][4];

    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
            printf("Digite um valor para matriz[%d][%d]: ", i+1, j+1);
            scanf("%d", &matriz[i][j]);
        }
    }

    int maior = matriz[0][0];
    int linha = 1;
    int coluna = 1;

    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
                if (matriz[i][j] > maior) {
                        maior = matriz[i][j];
                        linha = i+1;
                        coluna = j+1;
		}
        }
    }

    printf("\nO maior numero da matriz eh %d e esta na posicao [%d][%d] da matriz.\n", maior, linha, coluna);
}

4. Leia uma matriz 5 × 5. Leia também um valor X. O programa deverá fazer uma busca desse
valor na matriz e, ao final, escrever a localização (linha e coluna) ou uma mensagem de “não
encontrado”.

#include <stdio.h>

int main() {

	int matriz[5][5];
	int valor;

	printf("Digite um valor a ser encontrado na matriz: ");
	scanf("%d", &valor);

	for (int i=0; i<5; i++) {
        for (int j=0; j<5; j++) {
            printf("Digite um valor para matriz[%d][%d]: ", i+1, j+1);
            scanf("%d", &matriz[i][j]);
        }
    }

    for(int i=0; i<5; i++) {
        for(int j=0; j<5; j++) {
            if(valor == matriz[i][j]) {
                printf("Valor encontrado na posicao [%d][%d] da matriz.\n", i+1, j+1);
            } else {
                printf("Valor nao encontrado.\n");
            }
        }
    }

}

5. Gerar e imprimir uma matriz de tamanho 10 × 10, onde seus elementos são da forma:
A[i][j] = 2i + 7j - 2 se i < j;
A[i][j] = 3i2 - 1 se i = j;
A[i][j] = 4i3 – 5j2 + 1 se i > j:

#include <stdio.h>

int main() {

	int matriz[10][10];

	for(int i=0; i<10; i++) {
        for(int j=0; j<10; j++) {
            if(i < j) {
                matriz[i][j] = (2 * i) + (7 * j) - 2;
            } else if(i == j) {
                matriz[i][j] = (3 * (i * i)) - 1;
            } else if(i > j) {
                matriz[i][j] = (4 * (i * i * i)) - (5 * (j * j)) + 1;
            }
        }
	}

	for(int i=0; i<10; i++) {
        for(int j=0; j<10; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
	}

}

6. Gere matriz 4 × 4 com valores no intervalo [1, 20]. Escreva um programa que transforme a
matriz gerada numa matriz triangular inferior, ou seja, atribuindo zero a todos os elementos
acima da diagonal principal. Imprima a matriz original e a matriz transformada.

#include <stdio.h>
#include <stdlib.h>

int main()
{

    int matriz[4][4];

    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
            matriz[i][j] = (rand() % 20) +1 ;
        }
    }

    for (int i=0; i<4; i++) {
        for (int j=i+1; j<4; j++) {
            matriz[i][j] = 0;
        }
    };

    for (int i=0; i<4; i++){
        for (int j=0;j<4;j++){
            printf("%d  ", matriz[i][j]);
        };
        printf("\n");
    };

    return 0;
}

7. Faça um programa para gerar automaticamente números entre 0 e 99 de uma cartela de
bingo. Sabendo que cada cartela deverá conter 5 linhas de 5 números, gere estes dados de
modo a não ter números repetidos dentro das cartelas. O programa deve exibir na tela a
cartela gerada.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {

    int bingo [5][5];
    int random;

    srand(time(NULL));

    for (int a = 0; a < 5; a++) {

        for (int b = 0; b < 5; b++) {
            random = rand() % 99;
            bingo[a][b] = random;
        }
    }

    for (int a = 0; a < 5; a++) {

        for (int b = 0; b < 5; b++) {
            printf("\t %d ", bingo[a][b]);
        }

        printf("\n");    
    }

    return 0;
}

8. Faça um programa que leia duas matrizes 2 × 2 com valores reais. Ofereça ao usuário um
menu de opções:
a) somar as duas matrizes
b) subtrair a primeira matriz da segunda
c) adicionar uma constante às duas matrizes
d) imprimir as matrizes

#include <stdio.h>

int main() {

    int matriz1[2][2], matriz2[2][2], matrizFinal[2][2] = {0, 0, 0, 0};
    int opcao, valor;


    for (int i=0; i<2; i++) {
        for (int j=0; j<2; j++) {
            printf("Digite um valor para primeira matriz[%d][%d]: ", i+1, j+1);
            scanf("%d", &matriz1[i][j]);
        }
    }
    printf("\n");

    for (int i=0; i<2; i++) {
        for (int j=0; j<2; j++) {
            printf("Digite um valor para segunda matriz[%d][%d]: ", i+1, j+1);
            scanf("%d", &matriz2[i][j]);
        }
    }
    printf("\n");

    do {
        do {
            printf("MENU DE OPCOES:\n");
            printf("1.SOMAR\n2.SUBTRAIR\n3.ADICIONAR CONSTANTE\n4.IMPRIMIR\n5.SAIR\n");
            scanf("%d", &opcao);

            if((opcao < 1) || (opcao > 6)) {
                printf("Digite uma opcao valida!!\n");
            }

            switch(opcao) {
                case 1:
                    for(int i=0; i<2; i++) {
                        for(int j=0; j<2; j++) {
                            matrizFinal[i][j] = matriz1[i][j] + matriz2[i][j];
                        }
                    }
                    break;

                case 2:
                    for(int i=0; i<2; i++) {
                        for(int j=0; j<2; j++) {
                            matrizFinal[i][j] = matriz1[i][j] - matriz2[i][j];
                        }
                    }
                    break;

                case 3:
                    printf("Digite uma constante para ser adicionada nas matrizes: ");
                    scanf("%d", &valor);

                    for(int i=0; i<2; i++) {
                        for(int j=0; j<2; j++) {
                            matriz1[i][j] += valor;
                        }
                    }

                    for(int i=0; i<2; i++) {
                        for(int j=0; j<2; j++) {
                            matriz2[i][j] += valor;
                        }
                    }
                    break;
                
                case 4:
                    printf("\nMATRIZ 1:\n");
                    for (int i=0; i<2; i++) {
                        for (int j=0; j<2; j++) {
                            printf("\t %d ", matriz1[i][j]);
                        }
                        printf("\n");
                    }

                    printf("\nMATRIZ 2:\n");
                    for (int i=0; i<2; i++) {
                        for (int j=0; j<2; j++) {
                            printf("\t %d ", matriz2[i][j]);
                        }
                        printf("\n");
                    }

                    printf("\nMATRIZ FINAL:\n");
                    for (int i=0; i<2; i++) {
                        for (int j=0; j<2; j++) {
                            printf("\t %d ", matrizFinal[i][j]);
                        }
                        printf("\n");
                    }
                    break;

                case 5:
                    break;
            }
        } while((opcao < 1) || (opcao > 5));

        printf("Operacao efetuada com sucesso.\nDigite outra opcao!\n");
    } while(opcao != 5);

    return 0;

}


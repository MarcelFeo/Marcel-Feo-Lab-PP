/* Lab05 - Fun√ß√µes */

1. Crie uma fun√ß√£o que recebe como par√¢metro um n√∫mero inteiro e devolve o seu dobro.

#include <stdio.h>

int dobro(int num) {
    return num*2;
}

int main()
{

    int num1, num2;

    printf("Digite um numero: ");
    scanf("%d", &num1);

    num2 = dobro(num1);

    printf("O dobro de %d eh %d", num1, num2);

    return 0;
}

2. Fa√ßa uma fun√ß√£o que receba a data atual (dia, m√™s e ano em inteiro) e exiba-a na tela no
formato textual por extenso. Ex.: Data: 18/11/2022, Imprimir: 18 de novembro de 2022.

#include <stdio.h>

char imprimirData(int dia, int mes, int ano) {
    switch(mes) {
    case 1:
        printf("%d de Janeiro de %d\n", dia, ano);
        break;
    case 2:
        printf("%d de Fevereiro de %d\n", dia, ano);
        break;
    case 3:
        printf("%d de Marco de %d\n", dia, ano);
        break;
    case 4:
        printf("%d de Abril de %d\n", dia, ano);
        break;
    case 5:
        printf("%d de Maio de %d\n", dia, ano);
        break;
    case 6:
        printf("%d de Junho de %d\n", dia, ano);
        break;
    case 7:
        printf("%d de Julho de %d\n", dia, ano);
        break;
    case 8:
        printf("%d de Agosto de %d\n", dia, ano);
        break;
    case 9:
        printf("%d de Setembro de %d\n", dia, ano);
        break;
    case 10:
        printf("%d de Outubro de %d\n", dia, ano);
        break;
    case 11:
        printf("%d de Novembro de %d\n", dia, ano);
        break;
    case 12:
        printf("%d de Dezembro de %d\n", dia, ano);
        break;
    default:
        printf("Valor nao corresponde a nenhum mes!\n");
    }
}

int main()
{

    int dia, mes, ano;

    printf("Digite uma data:\n");
    printf("Dia: ");
    scanf("%d", &dia);
    printf("Mes: ");
    scanf("%d", &mes);
    printf("Ano: ");
    scanf("%d", &ano);

    imprimirData(dia, mes, ano);

    return 0;
}

3. Fa√ßa uma fun√ß√£o para verificar se um n√∫mero √© positivo ou negativo. Sendo que o valor de
retorno ser√° 1 se positivo, -1 se negativo e 0 se for igual a 0.

#include <stdio.h>

int verifica(int num) {
    if(num == 0) {
        printf("Igual a 0.");
        return 0;
    } else if(num > 0) {
        printf("Positivo.");
        return 1;
    } else if(num < 0) {
        printf("Negativo.");
        return -1;
    }
}

int main()
{

    int num;

    printf("Digite um numero: ");
    scanf("%d", &num);

    verifica(num);

    return 0;
}

4. Fa√ßa uma fun√ß√£o para verificar se um n√∫mero √© um quadrado perfeito. Um quadrado
perfeito √© um n√∫mero inteiro n√£o negativo que pode ser expresso como o quadrado de
outro n√∫mero inteiro. Ex.: 1, 4, 9...

#include <stdio.h>
#include <math.h>

int quadradoPerfeito(int num) {
    int raiz;

    raiz = sqrt(num);

    if((num > 0) && ((raiz * raiz) == num)) {
        printf("Eh quadrado perfeito!");
    } else {
        printf("Nao eh quadrado perfeito!");
    }

    return 0;
}

int main()
{

    int num;

    printf("Digite um numero: ");
    scanf("%d", &num);

    quadradoPerfeito(num);

    return 0;
}

5. Fa√ßa uma fun√ß√£o e um programa de teste para o c√°lculo do volume de uma esfera. Sendo
que o raio √© passado por par√¢metro.

#include <stdio.h>
#define PI 3.1415

float volumeEsfera(float raio){
    printf("IN FUNCTION!");
    return (4*PI*(raio*raio*raio))/3;
}

int main()
{

    float raio, volume;

    printf("Digite o raio da esfera: ");
    scanf("%f", &raio);

    volume = volumeEsfera(raio);

    printf("O volume eh %.2f", volume);

    return 0;
}

6. Fa√ßa uma fun√ß√£o que receba 3 n√∫meros inteiros como par√¢metro, representando horas,
minutos e segundos, e os converta em segundos.

#include <stdio.h>

void converte(int h, int min, int s) {
    int total = 0;

    total += (h*3600) + (min*60) + s;

    printf("%d segundos.", total);
}

int main()
{

    int hora, minuto, segundo;

    printf("Hora: ");
    scanf("%d", &hora);
    printf("Minuto: ");
    scanf("%d", &minuto);
    printf("Segundo: ");
    scanf("%d", &segundo);

    converte(hora, minuto, segundo);

    return 0;
}

7. Fa√ßa uma fun√ß√£o que receba uma temperatura em graus Celsius e retorne-a convertida em
graus Fahrenheit. A f√≥rmula de convers√£o √©: ùêπ = ùê∂ ‚àó (9,0/5,0) + 32,0, sendo F a temperatura
em Fahrenheit e C a temperatura em Celsius.

#include <stdio.h>

float celsiusToFahrenheit(float tempC) {
    return tempC * (9.0/5.0) + 32.0;
}

int main()
{
    
    float tempF, tempC;

    printf("Digite uma temperatura em Celsius: ");
    scanf("%f", &tempC);

    tempF = celsiusToFahrenheit(tempC);

    printf("%.2f em Fahrenheit eh %.2f", tempC, tempF);

    return 0;
}

8. Sejam a e b os catetos de um triangulo, onde a hipotenusa √© obtida pela equa√ß√£o:
hipotenusa = ‚àöùëé¬≤ + ùëè¬≤. Fa√ßa uma fun√ß√£o que receba os valores de a e b e calcule o valor
da hipotenusa atrav√©s da equa√ß√£o.

#include <stdio.h>
#include <math.h>

float hipotenusa(float a, float b) {
    return sqrt((a*a) + (b*b));
}

int main()
{
    
    float a, b, h;

    printf("Digite os valores dos catetos:\n");
    printf("A: ");
    scanf("%f", &a);
    printf("B: ");
    scanf("%f", &b);

    h = hipotenusa(a, b);

    printf("A hipotenusa eh %.2f", h);

    return 0;
}

9. Fa√ßa uma fun√ß√£o que receba a altura e o raio de um cilindro circular e retorne o volume do
cilindro. O volume de um cilindro circular √© calculado por meio da seguinte f√≥rmula: ùëâ = ÔÅ∞ ‚àó ùëüùëéùëñùëú2
‚àó ùëéùëôùë°ùë¢ùëüùëé, onde ÔÅ∞ = 3.141592.

#include <stdio.h>
#define PI 3.141592

float volumeCilindro(float h, float r) {
    return PI * (r*r) * h;
}

int main()
{

    float altura, raio, v;

    printf("Altura: ");
    scanf("%f", &altura);
    printf("Raio: ");
    scanf("%f", &raio);

    v = volumeCilindro(altura, raio);

    printf("O volume eh %.2f", v);

    return 0;
}

10. Fa√ßa uma fun√ß√£o que receba dois n√∫meros e retorne qual deles √© o maior.

#include <stdio.h>

int verifica(int n1, int n2) {
    return n1 > n2 ? n1 : n2;
}

int main()
{

    int num1, num2, maior;

    printf("Digite dois numeros:\n");
    printf("Numero 1: ");
    scanf("%d", &num1);
    printf("Numero 2: ");
    scanf("%d", &num2);

    maior = verifica(num1, num2);

    printf("O maior numero eh %d", maior);

    return 0;
}

11. Elabore uma fun√ß√£o que receba tr√™s notas de um aluno como par√¢metros e uma letra. Se a
letra for A, a fun√ß√£o dever√° calcular a m√©dia aritm√©tica das notas do aluno; se for P, dever√°
calcular a m√©dia ponderada, com pesos 5, 3 e 2.

#include <stdio.h>

float calcularMedia(float nota1, float nota2, float nota3, char op) {
    float media = 0;
    
    if(op == 'A' || op == 'a') {
        media = (nota1+nota2+nota3)/3;
    } else if(op == 'P' || op == 'p') {
        media = ((nota1*5)+(nota2*3)+(nota3*2))/10;
    } else {
        printf("Digite uma opcao valida!");
    }

    return media;
}

int main()
{

    float nota1, nota2, nota3, media;
    char op;

    printf("Digite 3 notas:\n");
    printf("Nota 1: ");
    scanf("%f", &nota1);
    printf("Nota 2: ");
    scanf("%f", &nota2);
    printf("Nota 3: ");
    scanf("%f", &nota3);

    printf("Digite 'A' para media aritmetica e 'P' para media ponderada:");
    scanf(" %c", &op);

    if((op == 'a' || op == 'A') || (op == 'p' || op == 'P')) {
        media = calcularMedia(nota1, nota2, nota3, op);
        printf("A media eh %.2f", media);
    } else {
        printf("Opcao invalida!");
    }

    return 0;
}

12. Escreva uma fun√ß√£o que receba um n√∫mero inteiro maior do que zero e retorne a soma de
todos os seus algarismos. Por exemplo, ao n√∫mero 251 corresponder√° o valor 8 (2 + 5 + 1).
Se o n√∫mero lido n√£o for maior do que zero, o programa terminar√° com a mensagem
‚ÄúN√∫mero inv√°lido‚Äù.

#include <stdio.h>

int somaNum(int num) {
    int soma = 0;

    while(num > 0){
        soma = soma+(num%10);
        num = num/10;
    }

    return soma;
}

int main()
{

    int num, soma = 0;

    printf("Digite um numero maior que zero: ");
    scanf("%d", &num);

    if(num > 0) {
        soma = somaNum(num);
        printf("A soma eh %d\n", soma);
    } else {
        printf("Digite um numero maior que zero!\n");
    }

    return 0;
}

13. Fa√ßa uma fun√ß√£o que receba dois valores num√©ricos e um s√≠mbolo. Este s√≠mbolo
representar√° a opera√ß√£o que se deseja efetuar com os n√∫meros. Se o s√≠mbolo for ‚Äò+‚Äô dever√°
ser realizada uma adi√ß√£o, se for ‚Äò‚Äì‚Äò uma subtra√ß√£o, se for ‚Äò*‚Äô uma multiplica√ß√£o e se for ‚Äò/‚Äô
ser√° efetuada uma divis√£o.

#include <stdio.h>

int calculadora(int num1, int num2, char op) {
    switch(op) {
        case '+':
            printf("O resultado eh %d\n", num1+num2);
            break;
        case '-':
            printf("O resultado eh %d\n", num1-num2);
            break;
        case '*':
            printf("O resultado eh %d\n", num1*num2);
            break;
        case '/':
            printf("O resultado eh %d\n", num1/num2);
            break;
        default:
            printf("Digite uma opcao valida!\n");
            break;
    }

    return 0;
}

int main()
{

    int num1, num2;
    char op;

    printf("Adicao: +\nSubtracao: -\nMultiplicacao: *\nDivisao: /\nSair: Q\n");
    printf("Digite uma opcao: ");
    scanf("%c", &op);

    if((op == 'q') || (op == 'Q')) {
        printf("Voce saiu do programa!\n");
    } else {
        printf("Digite o primeiro numero: ");
        scanf("%d", &num1);
        printf("Digite o segundo numero: ");
        scanf("%d", &num2);
        
        calculadora(num1, num2, op);
    }

    return 0;
}

14. Fa√ßa uma fun√ß√£o que receba a dist√¢ncia em Km e a quantidade de litros de gasolina
consumidos por um carro em um percurso, calcule o consumo em Km/l e escreva uma
mensagem de acordo com a tabela abaixo:

#include <stdio.h>

int calcularConsumo(float dist, float litro) {
    float consumo;

    consumo = dist/litro;

    if(consumo < 8) {
        printf("Venda o carro!\n");
    } else if((consumo >= 8) && (consumo <= 14)) {
        printf("Econ√¥mico!\n");
    } else {
        printf("Super econ√¥mico!");
    }

    return 0;
}

int main()
{

    float dist, litro;

    printf("Distancia(Km):");
    scanf("%f", &dist);
    printf("Litros: ");
    scanf("%f", &litro);

    calcularConsumo(dist, litro);

    return 0;
}

15. Crie um programa que receba tr√™s valores (obrigatoriamente maiores que zero),
representando as medidas dos tr√™s lados de um tri√¢ngulo. Elabore fun√ß√µes para:

a) Determinar se eles lados formam um tri√¢ngulo, sabendo que:
ÔÇ∑ O comprimento de cada lado de um tri√¢ngulo √© menor do que a soma dos outros
dois lados.
b) Determinar e mostrar o tipo de tri√¢ngulo, caso as medidas formem um tri√¢ngulo. Sendo
que:
ÔÇ∑ Chama-se equil√°tero o tri√¢ngulo que tem tr√™s lados iguais;
ÔÇ∑ Denominam-se is√≥sceles o tri√¢ngulo que tem o comprimento de dois lados iguais;
ÔÇ∑ Recebe o nome de escaleno o tri√¢ngulo que tem os tr√™s lados diferentes

#include <stdio.h>

int verificaTriangulo(float lado1, float lado2, float lado3) {
    if((lado1 < lado2+lado3) && (lado2 < lado1+lado3) && (lado3 < lado1+lado2)) {
        printf("Eh triangulo!\n");
        return 1;
    } else {
        printf("Nao eh triangulo!\n");
        return 0;
    }
}

int tipoTriangulo(float lado1, float lado2, float lado3) {
    if((lado1 == lado2) && (lado1==lado3)) {
        printf("Equilatero!");
    } else if((lado1 == lado2) || (lado1 == lado3) || (lado2 == lado3)) {
        printf("Isosceles!");
    } else if((lado1 != lado2) && (lado1 != lado3)) {
        printf("Escaleno!");
    }

    return 0;
}

int main()
{

    float lado1, lado2, lado3;
    int resultado;

    printf("Lado 1: ");
    scanf("%f", &lado1);
    printf("Lado 2: ");
    scanf("%f", &lado2);
    printf("Lado 3: ");
    scanf("%f", &lado3);

    resultado = verificaTriangulo(lado1, lado2, lado3);

    if(resultado == 1){
        tipoTriangulo(lado1, lado2, lado3);
    }

    return 0;
}

16. Fa√ßa uma fun√ß√£o chamada desenha_linha. Ele deve desenhar uma linha na tela usando uma
sequ√™ncia de s√≠mbolos de igual (Ex.: ========). A fun√ß√£o recebe por par√¢metro quantos
sinais de igual ser√£o mostrados.

#include <stdio.h>

int desenha_linha(int quant) {
    
    for(int i=0; i<quant; i++) {
        printf("=");
    }

    return 0;
}

int main()
{

    int quant;

    printf("Digite a quantidade de linhas que voce quer desenhar: ");
    scanf("%d", &quant);
    
    desenha_linha(quant);

    return 0;
}

17. Fa√ßa uma fun√ß√£o que receba dois n√∫meros inteiros positivos por par√¢metro e retorne a
soma dos N n√∫meros inteiros existentes entre eles.

#include <stdio.h>

int soma(int num1, int num2) {
    int soma=0;

    for(int i=num1+1; i<num2; i++) {
        soma += i;
    }

    return soma;

}

int main()
{

    int num1, num2, resultado;

    printf("Digite um numero positivo: ");
    scanf("%d", &num1);
    printf("Digite um outro numero positivo: ");
    scanf("%d", &num2);

    if((num1 < 0) && (num2 < 0)){
        printf("Digite numeros positivos!\n");
    } else {
        resultado = soma(num1, num2);
        printf("A soma eh %d", resultado);
    }

    return 0;
}

18. Fa√ßa uma fun√ß√£o que receba por par√¢metro dois valores inteiros x e z. Calcule e retorne o
resultado de x
z para o programa principal. Aten√ß√£o n√£o utilize nenhuma fun√ß√£o pronta de
exponencia√ß√£o.

#include <stdio.h>

int quadrado(int x, int z) {
    return x*x;
}

int main()
{

    int x, z, resultado;

    printf("Digite os valores:\n");
    printf("x: ");
    scanf("%d", &x);
    printf("z: ");
    scanf("%d", &z);

    resultado = quadrado(x, z);

    printf("x^2 = %d", resultado);

    return 0;
}

19. Fa√ßa uma fun√ß√£o que receba um n√∫mero inteiro positivo n e calcule o seu fatorial, n!.

#include <stdio.h>

int fatorial(int num) {
    int resultado = 1, i = 2;
    
    if(num == 0) {
        resultado = 1;
    }

    while(i <= num) {
        resultado *= i;
        i += 1;
    }

    return resultado;

}

int main()
{

    int num, resultado;

    printf("Digite um numero: ");
    scanf("%d", &num);

    resultado = fatorial(num);

    printf("%d! = %d", num, resultado);

    return 0;
}

20. Escreva uma fun√ß√£o para determinar a quantidade de n√∫meros primos abaixo de N.

#include <stdio.h>

int verificaPrimo(int num) {
    int divisores = 0;

    for(int i=1; i<=num; i++) {
        if(num % i == 0) {
            divisores += 1;
        }
    }

    if(divisores == 2) {
        return 1;
    } else {
        return 0;
    }
}

int main()
{

    int num, quant = 0;

    printf("Digite um numero: ");
    scanf("%d", &num);

    for(int i=1; i <= num; i++) {
        if(verificaPrimo(i) == 1) {
            quant += 1;
        }
    }

    printf("%d numeros primos", quant);

    return 0;
}

21. Crie uma fun√ß√£o que receba como par√¢metro um valor inteiro e gere como sa√≠da n linhas
com pontos de exclama√ß√£o, conforme o exemplo abaixo (para n = 5):

#include <stdio.h>

int imprimirPontos(int quant) {
    for(int i=0; i<quant; i++) {
        for(int j=0; j<=i; j++) {
            printf("!");
        }
        printf("\n");
    }

    return 0;
}

int main()
{

    int quant;

    printf("Digite um numero n de linhas: ");
    scanf("%d", &quant);

    imprimirPontos(quant);

    return 0;
}

23. Escreva uma fun√ß√£o que gera um tri√¢ngulo lateral de altura 2*n-1 e n largura. Por exemplo,
a sa√≠da para n = 4 seria:

#include <stdio.h>

int imprimirPontos(int quant) {
    for(int i=0; i<quant; i++) {
        for(int j=0; j<=i; j++) {
            printf("*");
        }
        printf("\n");
    }
    for(int i=0; i<quant; i++) {
        for(int j=quant; j>i; j--) {
            printf("*");
        }
        printf("\n");
    }

    return 0;
}

int main()
{

    int quant;

    printf("Digite um numero n de linhas: ");
    scanf("%d", &quant);

    imprimirPontos(quant);

    return 0;
}

24. Escreva uma fun√ß√£o que gera um tri√¢ngulo de altura e lados n e base 2*n-1. Por exemplo, a
sa√≠da para n = 6 seria:

#include <stdio.h>

int imprimirPontos(int quant) {
    int i, j, c = 1;

    for(i=quant; i>0; i--) {
        for(j=i-1; j>0; j--) {
            printf(" ");
        }
        for(j=0; j<c; j++) {
            printf("*");
        }
        printf("\n");
        c += 2;
    }
    
    // for(i=1; i<quant; i++) {
    //     for(j=quant-i; j>=1; j--) {
    //         printf(" ");
    //     }
    //     for(j=1; j<=i; j++) {
    //         printf("*");
    //     }
    //     for(j=1; j<=i; j++) {
    //         printf("*");
    //     }
    //     printf("\n");
    // }

    return 0;
}

int main()
{

    int quant;

    printf("Digite um numero n de linhas: ");
    scanf("%d", &quant);

    imprimirPontos(quant);

    return 0;
}
